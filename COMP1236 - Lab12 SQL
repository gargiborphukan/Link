#  Concatenate Course Name and Semester:
   Write a query to list all courses, concatenating the course_name and semester fields with a hyphen between them. Like this:
   "IT Essentials - 2024-3"

A:  Select CONCAT(semester, '-', course_name)
    FROM courses;

#  Find Courses with Labs on Fridays:
   Write a query to find all courses that have a lab session scheduled on Friday. Include only the course_id, course_name, and lab_time in the result.

A:  Select course_id, course_name, lab_time
    FROM courses
    WHERE lab_time LIKE 'Fri%';

#  Upcoming Assignments:
   Write a query to list all assignments with a due date after the current date.

A:   Select *
     FROM assignments
     WHERE due_date < CURRENT_DATE;

# Count Assignments by Status:
  Write a query to count the number of assignments for each status (e.g., "Not Started", "In Progress", "Completed").
  Hint: GROUP BY

A:   Select course_id, status, COUNT(*)
     FROM assignments
     GROUP By status;

#  Longest Course Name:
   Write a query to find the course with the longest course_name. Use the length() function to compare the lengths.
   Hint: either use ORDER BY ... DESC or do it in two steps - first find the length, then the course.

A:   Select course_name
     FROM courses
     ORDER BY LENGTH(course_name);

#  Uppercase Course Names:
   Write a query to return a list of all course names in uppercase.

A:   Select UPPER(course_name)
     FROM courses;

#  Assignments Due in September:
   Write a query to list the titles of all assignments that are due in September, regardless of year. Use the LIKE operator to filter due_date.

A:   Select due_date, title,course_id
     FROM assignments
     WHERE due_date LIKE'2024-10%';

#  Assignments with Missing Due Dates:
   Write a query to find all assignments where the due_date is missing. Note, there are no assignments with NULL due_dates initially,
  but one was added if you ran the INSERT statement in the examples above. Hint: due_date IS NULL
  Make sure you ran the INSERT ... from examples in Step 3, otherwise there are no assignments with NULL due_date

A:   Select due_date, title,course_id
     FROM assignments
     WHERE due_date IS NULL;

#   Total Assignments per Course:
    Write a query to list each course_id along with the total number of assignments associated with it. Join the two tables and use the COUNT() function to aggregate the results.

A:   Select courses.course_id, COUNT(assignments.title) AS total_assignments
     FROM courses
     JOIN assignments ON courses.course_id = assignments.course_id
     GROUP BY courses.course_id;

#   Courses Without Assignments (advanced):
    Write a query to find all courses that do not have any assignments.
    Hint: LEFT JOIN ... WHERE assignments.id IS NULL

A:   Select courses.course_id, courses.course_name
     FROM courses
     LEFT JOIN assignments ON courses.course_id = assignments.course_id
     WHERE assignments.title IS NULL;
